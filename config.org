#+TITLE:    Percs - Emacs configuration
#+AUTHOR:   Mora Unie Youer
#+EMAIL:    mora_unie_youer@riseup.net
#+DATE:     2022-03-03
#+PROPERTY: header-args+ :tangle "~/.emacs.d/config.el" :comments link
#+ARCHIVE:  ::* Archived

* This is me :3
#+begin_src emacs-lisp
	(setq user-full-name    "Mora Unie Youer"
				user-mail-address "mora_unie_youer@riseup.net")
#+end_src

* Initialization
** early-init.el
Early init file. Used to configure something before =init.el= is loaded.

Deferring garbage collection.
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
	(setq gc-cons-threshold most-positive-fixnum
				gc-cons-percentage 0.6)
#+end_src

Preventing Emacs from early package initialization.
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
	(setq package-enable-at-startup nil
				package-quickstart nil)
#+end_src

Disable UI elements.
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
	(menu-bar-mode -1)
	(tool-bar-mode -1)
	(scroll-bar-mode -1)
	(setq inhibit-splash-screen t
				use-file-dialog nil)
#+end_src

Preventing unwanted runtime builds when native compilation enabled.
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
	(setq comp-deferred-compilation nil)
#+end_src

** init.el
Init file. Used to load Percs configuration.

Setting Percs user directory.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
	(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src

Starting Emacs server.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el"
	(require 'server)
	(unless (server-running-p)
		(server-start))
#+end_src

Loading configuration.
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el" :var config-file="~/.emacs.d/config.el"
	(load config-file)
#+end_src

* Configuration
** Backup files
Stopping Emacs from making backup files.
#+begin_src emacs-lisp
	(setq make-backup-files nil
				auto-save-default nil
				create-lockfiles nil)
#+end_src

** Indentation
Tab indentation with size of 2 is the most comfortable for me. :3
#+begin_src emacs-lisp
	(setq-default indent-tabs-mode t
								tab-width 2)
	(setq tab-always-indent 'complete)
#+end_src

Fix incorrect indentation in org-mode babel src blocks
#+begin_src emacs-lisp
	(setq org-src-tab-acts-natively t)
#+end_src

Making Emacs erase the tab instead of removing 1 space at a time.
#+begin_src emacs-lisp
	(setq backward-delete-char-untabify-method 'hungry)
#+end_src

Making electric-indent behave sanely.
#+begin_src emacs-lisp
	(setq-default electric-indent-inhibit t)
#+end_src

Enabling automatic bracket/brace/parens pairing
#+begin_src emacs-lisp
	(electric-pair-mode 1)
#+end_src

** Package manager
Requiring =package= package and adding =gnu=, =nongnu= and =melpa= repositories.
#+begin_src emacs-lisp
	(require 'package)
	(package-initialize)

	(setq package-archives '(("gnu"    . "https://elpa.gnu.org/packages/")
													 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
													 ("melpa"  . "https://melpa.org/packages/")))
	(unless package-archive-contents
		(package-refresh-contents))
#+end_src

Installing =use-package= if needed and enabling it.
#+begin_src emacs-lisp
	(unless (package-installed-p 'use-package)
		(package-refresh-contents)
		(package-install 'use-package))
	(eval-when-compile
		(require 'use-package))
#+end_src

Always ensure and demand packages.
#+begin_src emacs-lisp
	(setq use-package-always-demand t
				use-package-always-ensure t)
#+end_src

** Appearance
*** UI
Enabling column numbers.
#+begin_src emacs-lisp
	(global-display-line-numbers-mode 1)
#+end_src

Using theme for Emacs.
#+begin_src emacs-lisp
	(use-package cyberpunk-theme
		:config (load-theme 'cyberpunk t))
#+end_src

Using =FiraCode Nerd Font= because I like it :3
#+begin_src emacs-lisp
	(set-frame-font "FiraCode Nerd Font Mono 8" nil t)
#+end_src
*** org-mode
**** Bullets
Show bullets in org-mode.
#+begin_src emacs-lisp
	(use-package org-bullets
		:hook (org-mode . org-bullets-mode))
#+end_src

** Programming
*** Git
#+begin_src emacs-lisp
	(use-package magit
		:if (executable-find "git")
		:bind
		(("C-x g" . magit-status)
		 (:map magit-status-mode-map
					 ("M-RET" . magit-diff-visit-file-other-window)))
		:config
		(defun magit-log-follow-current-file ()
			"A wrapper around `magit-log-buffer-file' with `--follow' argument."
			(interactive)
			(magit-log-buffer-file t)))
#+end_src
*** Projectile
#+begin_src emacs-lisp
	(use-package projectile
		:bind ("C-c p" . projectile-command-map)
		:config (projectile-mode 1))
#+end_src
*** YASnippet
#+begin_src emacs-lisp
	(use-package yasnippet
		:diminish yas-minor-mode
		:init (use-package yasnippet-snippets :after yasnippet)
		:hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
		:bind
		(:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
		(:map yas-keymap (("TAB"   . smarter-yas-expand-next-field)
											([(tab)] . smarter-yas-expand-next-field)))
		:config
		(yas-reload-all)
		(defun smarter-yas-expand-next-field ()
			"Try to `yas-expand' then `yas-next-field' at current cursor position."
			(interactive)
			(let ((old-point (point))
						(old-tick (buffer-chars-modified-tick)))
				(yas-expand)
				(when (and (eq old-point (point))
									 (eq old-tick (buffer-chars-modified-tick)))
					(ignore-errors (yas-next-field))))))
#+end_src
*** Reset language
#+begin_src emacs-lisp
	(defconst reset-mode-syntax-table
		(with-syntax-table (copy-syntax-table)
			; Comments start with #
			(modify-syntax-entry ?# "<")
			; Comments end on newline
			(modify-syntax-entry ?\n ">")
			; Highlighting strings and chars
			(modify-syntax-entry ?' "\"")
			(syntax-table))
		"Syntax table for `reset-mode`.")

	(eval-and-compile
		(defconst reset-keywords
			'("if" "else"                   ; Conditionals
				"break" "while"               ; Loops
				"allocate" "return" "syscall" ; Functions
				"global" "goto" "label"       ; Labels
				"readchar" "writechar"        ; Byte operations
				"char" "int"                  ; Array types
				"include"))                   ; File operations
		(defconst reset-highlights
			`((,(regexp-opt reset-keywords 'symbols) . font-lock-keyword-face))))

	(defun reset-indent-line ()
		"Basic indentation function."
		(let (indent boi-p move-eol-p (point (point)))
			(save-excursion
				(back-to-indentation)
				(setq indent (car (syntax-ppss))
							boi-p  (= point (point)))
				(when (and (eq (char-after) ?\n)
									 (not boi-p))
					(setq indent 0))
				(when boi-p
					(setq move-eol-p t))
				(when (or (eq (char-after) ?\))
									(eq (char-after) ?\}))
					(setq indent (1- indent)))
				(delete-region (line-beginning-position) (point))
				(indent-to (* tab-width indent)))
			(when move-eol-p
				(move-end-of-line nil))))

	(define-derived-mode reset-mode prog-mode "Reset"
		"Major mode for editing Reset code."
		:syntax-table reset-mode-syntax-table
		(setq-local font-lock-defaults '(reset-highlights))
		(setq-local comment-start "# ")
		(setq-local comment-end "")
		(setq-local comment-start-skip "#+ *")
		(setq-local indent-line-function #'reset-indent-line))
	;; Enable mode on .rt files
	(add-to-list 'auto-mode-alist '("\\.rt\\'" . reset-mode))
#+end_src
